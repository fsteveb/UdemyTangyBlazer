@page "/product/create"
@page "/product/edit/{id:int}"

@inject IProductRepository _productRepository
@inject ICategoryRepository _categoryRepository
@inject NavigationManager _navigationManager
@inject IFileUpload _fileUpload
@inject IJSRuntime _jsRuntime
@attribute [Authorize]

<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">@Title Product</h3>

    <div class="col-md-10">
        @if (IsLoading)
        {
            // loading gif
            <div class="text-center">
                <img src="/images/loading.gif" />
            </div>
        }
        else
        {
            <EditForm Model="Product" OnValidSubmit="UpsertProduct">
                <DataAnnotationsValidator/>
                @*<ValidationSummary/>*@
                <div class="form-group">
                    <label>Name</label>
                    <InputText @bind-Value="Product.Name" class="form-control"></InputText>
                    <ValidationMessage For="()=>Product.Name"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Color</label>
                    <InputText @bind-Value="Product.Color" class="form-control"></InputText>
                    <ValidationMessage For="()=>Product.Color"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Description</label>
                    <SfRichTextEditor @bind-Value="Product.Description"></SfRichTextEditor>
                    <ValidationMessage For="()=>Product.Description"></ValidationMessage>
                </div>
                <div class="row pt-3">
                    <div class="form-group col-6">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="Product.ShopFavorite" class="form-check-input"></InputCheckbox>
                            <label class="form-check-label">Is Shop Favorite</label>
                        </div>
                    </div>
                    <div class="form-group col-6">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="Product.CustomerFavorite" class="form-check-input"></InputCheckbox>
                            <label class="form-check-label">Is Customer Favorite</label>
                        </div>
                    </div>
                    <div class="form-group col-6">
                        <label>Category</label>
                        <InputSelect @bind-Value="Product.CategoryId" class="form-select">
                            <option value="0" disabled="disabled">--Select Category--</option>
                            @foreach (var cat in Categories)
                            {
                                <option value="@cat.Id">@cat.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="()=>Product.CategoryId"></ValidationMessage>
                    </div>
                    <div class="form-group pt-4 col-6">
                        <InputFile OnChange="HandleImageUpload"></InputFile>
                    </div>
                </div>
                <div class="form-group py-2">
                    <button class="btn btn-primary">@Title</button>
                    <NavLink href="product" class="btn btn-secondary">Back to Index</NavLink>
                </div>
            </EditForm>
        }
    </div>

    <div class="col-md-2">
        <img src="@Product.ImageUrl" class="w-100"
    </div>

</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
    private ProductDTO Product { get; set; } = new()
    {
        ImageUrl = "/images/product/default.png"
    };
    private string Title { get; set; } = "Create";
    public bool IsLoading { get; set; }
    private string OldImageUrl { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProduct();
        }
    }

    private async Task LoadProduct()
    {
        IsLoading = true;
        StateHasChanged();
        Categories = await _categoryRepository.GetAll();
        if (Id != 0)
        {
            // update request
            Title = "Update";
            Product = await _productRepository.Get(Id);
            OldImageUrl = Product.ImageUrl;
        }
        IsLoading = false;
        StateHasChanged();
    }

    private async Task UpsertProduct()
    {
        try
        {
            if (Id == 0)
            {
                // create
                await _productRepository.Create(Product);
                await _jsRuntime.ToastrSuccess("Product Created successfully");
            }
            else
            {
                if (OldImageUrl != Product.ImageUrl)
                {
                    _fileUpload.DeleteFile(OldImageUrl);
                }
                // update
                await _productRepository.Update(Product);
                await _jsRuntime.ToastrSuccess("Product updated successfully");
            }

            _navigationManager.NavigateTo("product");
        }
        catch (Exception ex)
        {
            if(ex.InnerException != null)
            {
                await _jsRuntime.ToastrError(ex.InnerException.Message);
            }
            else
            {
                await _jsRuntime.ToastrError(ex.Message);
            }
        }
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        IsLoading = true;

        try
        {
            if(e.GetMultipleFiles().Count > 0)
            {
                foreach (IBrowserFile file in e.GetMultipleFiles())
                {
                    FileInfo fileInfo = new FileInfo(file.Name);
                    if (fileInfo.Extension == ".jpg" ||
                        fileInfo.Extension == ".png" ||
                        fileInfo.Extension == ".jpeg" )
                    {
                        Product.ImageUrl = await _fileUpload.UploadFile(file);
                    }
                    else
                    {
                        await _jsRuntime.ToastrError("Please only upload files with extension jpg, png, or jpeg");
                        return;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await _jsRuntime.ToastrError(ex.Message);
        }
        finally
        {
            IsLoading = false;
        }
    }
}
